C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
C_analytical
C
F = 0.3
a = 0.1
dt = 0.1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 1:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
C_analytical
F = -0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] - F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
(C_analytical[1] + F/a)
exp(a * i)
F/a
F = -0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) + F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] - F/a) * exp(a * i) + F/a
}
lines(seq(1,4), C_analytical, col = 'red')
+ F/a
- F/a
F = 0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] * (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
i=3
C[i-1] * (F + a * C[i-1]) * dt
F = 0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -0.3
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
(F + a * C[i-1]) * dt
F = -0.5
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -1.0
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -1.2
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -1.5
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l')
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -1.5
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(0,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = -1.5
a = 0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(6,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 1.5
a = -0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(6,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = -0.1
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(6,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = -0.3
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(6,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = -0.3
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(0,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = -0.4
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(0,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = -0.5
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(0,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
F = 0.3
a = -0.7
dt = 1
C = c(10, NA, NA, NA)
for (i in 2:4){
C[i] = C[i-1] + (F + a * C[i-1]) * dt
}
plot(seq(1,4), C, type = 'l', ylim = c(0,10))
C_analytical = c(10, NA, NA, NA)
for (i in 2:4){
C_analytical[i] = (C_analytical[1] + F/a) * exp(a * i) - F/a
}
lines(seq(1,4), C_analytical, col = 'red')
C
t=seq(0, 365, 1)
plot(sin(t))
t=seq(0, 365, 1)
y = sin(t)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t+180)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t-180)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
t=seq(0, 365, 1)
y = sin(t/180)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t/360)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t/90)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t/100)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t/10)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
y = sin(t/120)
plot(t,y,type="l", xlab="time", ylab="Sine wave")
plot(t, temp,type="l", xlab="time", ylab="temp)
temp = sin(t/120)
plot(t, temp,type="l", xlab="time", ylab="temp")
windspeed = sin(t/50)
plot(t, windspeed,type="l", xlab="time", ylab="u10")
windspeed = sin(t/60)
plot(t, windspeed,type="l", xlab="time", ylab="u10")
windspeed = sin(t/40)
plot(t, windspeed,type="l", xlab="time", ylab="u10")
plot(t, temp,type="l", xlab="time", ylab="temp")
as.Date('07-30-2023') +days(7*12)
as.Date('2023-07-30') +days(7*12)
as.Date('2023-07-30') +zoo::days(7*12)
as.Date('2023-07-30') +lubridate::days(7*12)
480/24
480/8
60/5
as.Date('2023-06-30') +lubridate::days(7*12)
# Load LakeEnsemblR
library(LakeEnsemblR)
#initial clean up
rm(list = ls())
graphics.off()
cat("\f")
# set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# load library
library(LakeEnsemblR)
# Set config file
config_file <- "LakeEnsemblR.yaml"
model <- c("FLake", "GLM", "GOTM", "Simstrat")
# 1. Example - creates directories with all model setup
export_config(config_file = config_file, model = c("FLake", "GLM", "GOTM", "Simstrat"),
folder = ".")
devtools::install_github('aemon-j/LakeEnsemblR')
#initial clean up
rm(list = ls())
graphics.off()
cat("\f")
# set working directory
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# load library
library(LakeEnsemblR)
# Set config file
config_file <- "LakeEnsemblR.yaml"
model <- c("FLake", "GLM", "GOTM", "Simstrat")
# 1. Example - creates directories with all model setup
export_config(config_file = config_file, model = c("FLake", "GLM", "GOTM", "Simstrat"),
folder = ".")
# 2. Run ensemble lake models
run_ensemble(config_file = config_file,
model = c("FLake", "GLM", "GOTM", "Simstrat"),
return_list = FALSE, parallel = FALSE)
# path of the output netcdf file
ncdf <- "output/ensemble_output.nc"
# plot heatmap
plot_heatmap(ncdf)
### calibration
cali_res <- cali_ensemble(config_file = config_file, num = 10000, cmethod = "MCMC",
parallel = TRUE, model = model)
# get best parameters
best_par <- setNames(lapply(model, function(m)cali_res[[m]]$bestpar), model)
print(best_p)
print(best_par)
run_ensemble(config_file = config_file,
model = c("FLake", "GLM", "GOTM", "Simstrat"),
return_list = FALSE, parallel = FALSE)
export_config(config_file = config_file, model = c("FLake", "GLM", "GOTM", "Simstrat"),
folder = ".")
run_ensemble(config_file = config_file,
model = c("FLake", "GLM", "GOTM", "Simstrat"),
return_list = FALSE, parallel = FALSE)
# path of the output netcdf file
ncdf <- "output/ensemble_output.nc"
# plot heatmap
plot_heatmap(ncdf)
## Plot model output using gotmtools/ggplot2
# Extract names of all the variables in netCDF
ncdf <- "output/ensemble_output.nc"
vars <- gotmtools::list_vars(ncdf)
vars # Print variables
p1 <- plot_heatmap(ncdf)
p1
# Change the theme and increase text size for saving
p1 <- p1 +
theme_classic(base_size = 24) +
scale_colour_gradientn(limits = c(0, 21),
colours = rev(RColorBrewer::brewer.pal(11, "Spectral")))
p1
# Change the theme and increase text size for saving
p1 <- p1 +
theme_minimal(base_size = 24) +
scale_colour_gradientn(limits = c(0, 21),
colours = rev(RColorBrewer::brewer.pal(11, "Spectral")))
# Load libraries for post-processing
library(gotmtools)
library(ggplot2)
# Change the theme and increase text size for saving
p1 <- p1 +
theme_classic(base_size = 24) +
scale_colour_gradientn(limits = c(0, 21),
colours = rev(RColorBrewer::brewer.pal(11, "Spectral")))
# Save as a png file
ggsave("output/ensemble_heatmap.png", p1,  dpi = 300,width = 384,height = 280, units = "mm")
calc_fit(ncdf = "output/ensemble_output.nc",
model = c("FLake", "GLM",  "GOTM", "Simstrat"),
var = "temp")
# Johannes:
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
rm(list = ls())
graphics.off()
cat("\14")
library(LakeEnsemblR)
library(ggplot2)
library(ggpubr)
library(lubridate)
library(reshape2)
library(tidyr)
qual_fun <- function(O, P){
# Arguments:
#^^^^^^^^^^
# O: observed values
# P: predicted values
#
# Return Value:
#^^^^^^^^^^^^^^
# qual: A data.frame containing the six quality estimates
# set of both O and P where both have no NAs
id <- !((is.na(O) | is.na(P)) | (is.na(O) & is.na(P)))
O <- O[id]
P <- P[id]
# rmse
rmse <- sqrt(mean((O - P)^2, na.rm = TRUE))
# nash sutcliff
nse <- 1 - sum((O - P)^2, na.rm = TRUE)/sum((O - mean(O, na.rm=TRUE))^2, na.rm = TRUE)
# pearson corelation coef
r <- sum((O - mean(O, na.rm = TRUE))*(P - mean(P, na.rm = TRUE)),
na.rm = TRUE)/sqrt(sum((O - mean(O, na.rm = TRUE))^2, na.rm = TRUE)*
sum((P - mean(P, na.rm = TRUE))^2, na.rm = TRUE))
# bias
bias <- mean((P - O), na.rm = TRUE)
# mean absolute error
mae <- mean(abs(O - P), na.rm = TRUE)
# normalised mean absolute error
nmae <- mean(abs((O - P)/O), na.rm = TRUE)
qual <- data.frame(rmse = rmse, nse = nse, r = r, bias = bias, mae = mae, nmae = nmae)
return(qual)
}
# Plot depth and time-specific results
thm <- theme_pubr(base_size = 17) + grids()
config_file <- "LakeEnsemblR.yaml"
model <- c("GLM", "GOTM", "Simstrat", "FLake")
# Import the LER output into your workspace
ens_out <- paste0("output/", get_yaml_value(config_file, "output", "file"),
".nc")
# load water temp for the cali and vali periods
wtemp <- load_var(ens_out, "temp",dim = "model")
# for the rviewers sake calculate metrics at each depth and then average
depth_qual <- list()
cols_c <- which(apply(wtemp$Obs, 2, function(x)sum(!is.na(x))) != 0)[-1]
rows_c <- which(apply(wtemp$Obs, 1, function(x)sum(!is.na(x))) > 1)
for (m in model) {
depth_qual[[m]]$calibration <- melt(lapply(cols_c, function(c) qual_fun(wtemp$Obs[rows_c, c],
wtemp[[m]][rows_c, c])))
depth_qual[[m]]$calibration$L1 <- as.numeric(gsub("wtr_", "",depth_qual[[m]]$calibration$L1))
colnames(depth_qual[[m]]$calibration) <- c("Metric", "Value", "Depth")
}
depth_qual <- reshape2::melt(depth_qual, id.vars = c("Depth", "Metric"))
depth_qual <- depth_qual[, -3]
colnames(depth_qual) <- c("Depth", "Metric", "Value", "Period", "Model")
palm_depth <- ggplot(depth_qual) + geom_line(aes(x = Depth, y = Value, col = Period)) +
coord_flip() + facet_grid(Model ~ Metric, scales = "free_x")  + scale_x_reverse() + thm +
xlab("Depth (m)")
palm_depth
